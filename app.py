import requests
import os
from dotenv import load_dotenv
from flask import Flask, request, jsonify, send_from_directory
from database import get_db_connection, close_db_connection
from datetime import datetime

# ‚úÖ 1. Carrega vari√°veis de ambiente
load_dotenv()

# ‚úÖ 2. CRIA A INST√ÇNCIA DO FLASK ‚Äî ISSO DEVE VIR ANTES DE QUALQUER @app.route!
app = Flask(__name__)

# ‚úÖ 3. Configura√ß√µes da Z-API
ZAPI_TOKEN = os.getenv("ZAPI_TOKEN")
ZAPI_INSTANCE = os.getenv("ZAPI_INSTANCE")

# ‚úÖ 4. ROTA RAIZ ‚Äî AGORA SIM, app J√Å EXISTE!
@app.route('/')
def home():
    return send_from_directory('frontend', 'index.html')

# ‚úÖ 5. ROTA CHECKIN PAGE
@app.route('/checkin')
def checkin_page():
    return send_from_directory('frontend', 'checkin.html')

# ‚úÖ 6. ROTA PARA ARQUIVOS EST√ÅTICOS (CSS, JS)
@app.route('/<path:filename>')
def static_files(filename):
    return send_from_directory('frontend', filename)

# ‚úÖ 7. FUN√á√ÉO DE ENVIO DE WHATSAPP
def enviar_whatsapp_alerta(crianca_id, motivo="Est√° precisando de voc√™"):
    conn = get_db_connection()
    if not conn:
        print("‚ùå Erro ao conectar ao banco")
        return False

    cursor = conn.cursor(dictionary=True)
    
    # Busca dados da crian√ßa
    cursor.execute("SELECT nome FROM criancas WHERE id = %s", (crianca_id,))
    crianca = cursor.fetchone()
    if not crianca:
        cursor.close()
        conn.close()
        print("‚ùå Crian√ßa n√£o encontrada")
        return False

    # Busca respons√°veis
    cursor.execute("SELECT nome, telefone_whatsapp FROM responsaveis WHERE crianca_id = %s", (crianca_id,))
    responsaveis = cursor.fetchall()
    cursor.close()
    conn.close()

    if not responsaveis:
        print("‚ùå Nenhum respons√°vel encontrado")
        return False

    # ‚úÖ DEBUG: Verifica se tokens est√£o carregados
    print(f"üîê ZAPI_INSTANCE: {ZAPI_INSTANCE}")
    print(f"üîê ZAPI_TOKEN: {ZAPI_TOKEN[:5]}...")

    for resp in responsaveis:
        # Formata telefone: garante que come√ßa com 55
        telefone = resp['telefone_whatsapp']
        if not telefone.startswith('55'):
            telefone = '55' + telefone

        mensagem = f"üîî *Igreja Mais de Cristo - Cultinho Kids*\n\n" \
                   f"Oi, {resp['nome']}! Sua(o) filha(o) *{crianca['nome']}* est√° precisando de voc√™ aqui no cultinho.\n" \
                   f"Motivo: {motivo}\n\n" \
                   f"üìç Pode vir at√© a Sala Kids? Estamos com ela(e) com carinho!\n\n" \
                   f"‚ù§Ô∏è Equipe Mais de Cristo Canasvieiras"

        # ‚úÖ URL E HEADERS CORRIGIDOS ‚Äî PADR√ÉO Z-API
        url = f"https://api.z-api.io/instances/{ZAPI_INSTANCE}/messages/text"
        headers = {
            "Client-Token": ZAPI_TOKEN,
            "Content-Type": "application/json"
        }
        payload = {
            "phone": telefone,
            "message": mensagem
        }

        try:
            response = requests.post(url, json=payload, headers=headers, timeout=10)
            if response.status_code in [200, 201]:
                print(f"‚úÖ Mensagem enviada para {resp['nome']} ({telefone})")
            else:
                print(f"‚ùå Erro ao enviar para {telefone}: {response.text}")
        except Exception as e:
            print(f"‚ùå Erro na requisi√ß√£o: {e}")

    return True

# ‚úÖ 8. ROTA: CHECK-IN
@app.route('/checkin', methods=['POST'])
def registrar_checkin():
    data = request.json
    crianca_id = data.get('crianca_id')
    status = data.get('status', 'presente')
    observacao = data.get('observacao', '')

    conn = get_db_connection()
    if not conn:
        return jsonify({"error": "Erro ao conectar ao banco"}), 500

    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO checkins (crianca_id, status, observacao_alerta) VALUES (%s, %s, %s)",
        (crianca_id, status, observacao)
    )
    conn.commit()
    checkin_id = cursor.lastrowid
    cursor.close()
    conn.close()

    # Se for alerta, envia WhatsApp
    if status == 'alerta_enviado':
        sucesso = enviar_whatsapp_alerta(crianca_id, observacao)
        if not sucesso:
            return jsonify({"success": True, "checkin_id": checkin_id, "warning": "Check-in feito, mas falha ao enviar WhatsApp"}), 201

    return jsonify({"success": True, "checkin_id": checkin_id}), 201

# ‚úÖ 9. ROTA: CADASTRAR CRIAN√áA
@app.route('/cadastrar-crianca', methods=['POST'])
def cadastrar_crianca():
    try:
        data = request.json
        print("üì• Dados recebidos:", data)  # Log para debug

        if not data:
            return jsonify({"error": "Nenhum dado recebido"}), 400

        conn = get_db_connection()
        if not conn:
            print("‚ùå Falha ao conectar ao banco de dados")
            return jsonify({"error": "Erro ao conectar ao banco"}), 500

        cursor = conn.cursor()
        
        # Log dos valores que ser√£o inseridos
        print(f"üìù Inserindo: nome={data.get('nome')}, data_nasc={data.get('data_nascimento')}, turma={data.get('turma')}")

        cursor.execute(
            "INSERT INTO criancas (nome, data_nascimento, turma, observacoes) VALUES (%s, %s, %s, %s)",
            (
                data.get('nome'),
                data.get('data_nascimento'),
                data.get('turma'),
                data.get('observacoes', '')
            )
        )
        
        conn.commit()
        crianca_id = cursor.lastrowid
        print(f"‚úÖ Crian√ßa cadastrada com ID: {crianca_id}")
        
        cursor.close()
        conn.close()
        
        return jsonify({"success": True, "crianca_id": crianca_id})

    except Exception as e:
        print(f"üî• ERRO AO CADASTRAR CRIAN√áA: {str(e)}")
        import traceback
        traceback.print_exc()
        return jsonify({"error": f"Erro interno: {str(e)}"}), 500

# ‚úÖ 10. ROTA: CADASTRAR RESPONS√ÅVEL
@app.route('/cadastrar-responsavel', methods=['POST'])
def cadastrar_responsavel():
    data = request.json
    conn = get_db_connection()
    if not conn:
        return jsonify({"error": "Erro no banco"}), 500

    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO responsaveis (crianca_id, nome, telefone_whatsapp, tipo_relacao) VALUES (%s, %s, %s, %s)",
        (data['crianca_id'], data['nome'], data['telefone_whatsapp'], data.get('tipo_relacao', 'Respons√°vel'))
    )
    conn.commit()
    cursor.close()
    conn.close()
    return jsonify({"success": True})

# ‚úÖ 11. ROTA: LISTAR CRIAN√áAS
@app.route('/listar-criancas', methods=['GET'])
def listar_criancas():
    conn = get_db_connection()
    if not conn:
        return jsonify({"error": "Erro no banco"}), 500

    cursor = conn.cursor(dictionary=True)
    cursor.execute("SELECT id, nome, turma FROM criancas ORDER BY nome")
    criancas = cursor.fetchall()
    cursor.close()
    conn.close()
    return jsonify({"success": True, "criancas": criancas})

# ‚úÖ 14. ROTA: RELAT√ìRIO COMPLETO DE CHECKINS
@app.route('/relatorio-checkins', methods=['GET'])
def relatorio_checkins():
    try:
        conn = get_db_connection()
        if not conn:
            return jsonify({"error": "Erro ao conectar ao banco"}), 500

        cursor = conn.cursor(dictionary=True)

        # ‚úÖ 1. Total de crian√ßas cadastradas
        cursor.execute("SELECT COUNT(*) as total FROM criancas")
        total_criancas = cursor.fetchone()['total']

        # ‚úÖ 2. Frequ√™ncia por turma
        cursor.execute("""
            SELECT turma, COUNT(*) as total
            FROM criancas
            GROUP BY turma
            ORDER BY turma
        """)
        frequencia_por_turma = cursor.fetchall()

        # ‚úÖ 3. √öltimos 10 check-ins (com nome da crian√ßa e status)
        cursor.execute("""
            SELECT c.nome, c.turma, ch.status, ch.data_checkin, ch.observacao_alerta
            FROM checkins ch
            JOIN criancas c ON ch.crianca_id = c.id
            ORDER BY ch.data_checkin DESC
            LIMIT 10
        """)
        ultimos_checkins = cursor.fetchall()

        # ‚úÖ 4. Alertas recentes (√∫ltimos 5 alertas)
        cursor.execute("""
            SELECT c.nome, c.turma, ch.status, ch.data_checkin, ch.observacao_alerta
            FROM checkins ch
            JOIN criancas c ON ch.crianca_id = c.id
            WHERE ch.status IN ('alerta_enviado', 'pai_veio', 'acalmou_sozinha')
            ORDER BY ch.data_checkin DESC
            LIMIT 5
        """)
        alertas_recentes = cursor.fetchall()

        cursor.close()
        conn.close()

        return jsonify({
            "success": True,
            "total_criancas": total_criancas,
            "frequencia_por_turma": frequencia_por_turma,
            "ultimos_checkins": ultimos_checkins,
            "alertas_recentes": alertas_recentes,
            "gerado_em": datetime.now().strftime("%d/%m/%Y %H:%M:%S")
        })

    except Exception as e:
        print(f"üî• ERRO no relat√≥rio: {str(e)}")
        return jsonify({"error": f"Erro interno: {str(e)}"}), 500
        
# ‚úÖ 13. ROTA: WEBHOOK DA Z-API ‚Äî RECEBE EVENTOS DO WHATSAPP
@app.route('/webhook/zapi', methods=['POST'])
def webhook_zapi():
    try:
        payload = request.get_json()
        if not payload:
            print("‚ùå Webhook: payload vazio")
            return jsonify({"status": "error", "message": "Payload vazio"}), 400

        event_type = payload.get('type')

        # ‚úÖ LOG DO EVENTO RECEBIDO
        print(f"üì© Webhook recebido | Tipo: {event_type}")
        print(f"üì¶ Payload: {payload}")

        # üîç Se for mensagem recebida
        if event_type == 'message.received':
            sender = payload.get('sender')  # telefone no formato 5511999999999
            message_text = payload.get('body', '').strip()

            print(f"üí¨ Mensagem de {sender}: {message_text}")

            # ‚úÖ AQUI VOC√ä PODE INTEGRAR COM SEU BANCO!
            # Ex: buscar se esse telefone √© de um respons√°vel cadastrado
            # Ex: se a mensagem for "CADASTRAR: ...", processar cadastro

            # üöß POR ENQUANTO, S√ì LOGAMOS ‚Äî mas j√° t√° RECEBENDO!
            # Vamos adicionar a l√≥gica de resposta autom√°tica abaixo üëá

            # ‚úÖ Responder automaticamente (opcional)
            if message_text.lower() in ['oi', 'ola', 'ol√°', 'bom dia', 'boa tarde', 'boa noite']:
                responder_whatsapp(sender, "üëã Ol√°! Aqui √© a equipe do Cultinho Kids da Igreja Mais de Cristo. Como podemos ajudar?")

        # ‚úÖ Se for status de mensagem (entregue, lida etc)
        elif event_type == 'message.status':
            message_id = payload.get('messageId')
            status = payload.get('status')
            print(f"üì¨ Status da mensagem {message_id}: {status}")

        # ‚úÖ Se for atualiza√ß√£o de conex√£o
        elif event_type == 'connection.update':
            connection_status = payload.get('status')
            print(f"üîå Conex√£o WhatsApp: {connection_status}")

        # ‚úÖ SEMPRE responda com 200 OK ‚Äî sen√£o a Z-API reenvia!
        return jsonify({"status": "success"}), 200

    except Exception as e:
        print(f"üî• ERRO no webhook: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

# ‚úÖ FUN√á√ÉO AUXILIAR: RESPONDER MENSAGEM VIA Z-API
def responder_whatsapp(telefone, mensagem):
    """Envia uma mensagem de resposta via Z-API"""
    if not ZAPI_TOKEN or not ZAPI_INSTANCE:
        print("‚ùå Tokens da Z-API n√£o configurados")
        return False

    url = f"https://api.z-api.io/instances/{ZAPI_INSTANCE}/messages/text"
    headers = {
        "Client-Token": ZAPI_TOKEN,
        "Content-Type": "application/json"
    }
    payload = {
        "phone": telefone,
        "message": mensagem
    }

    try:
        response = requests.post(url, json=payload, headers=headers, timeout=10)
        if response.status_code in [200, 201]:
            print(f"‚úÖ Resposta enviada para {telefone}")
            return True
        else:
            print(f"‚ùå Erro ao responder: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o de resposta: {e}")
        return False
        
# ‚úÖ 12. RODA LOCALMENTE (Render usa Gunicorn ‚Äî ignora isso em produ√ß√£o)
if __name__ == '__main__':
    port = int(os.getenv('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)
